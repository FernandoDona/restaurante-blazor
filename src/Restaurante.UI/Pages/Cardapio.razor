@page "/cardapio"
@using Restaurante.Data.Interfaces
@using System.Globalization
@using System.Diagnostics

@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IProductData _productData
@inject ICategoryData _categoryData

<section class="justify-content-center my-5">
    <h3 class="text-center">Cardapio</h3>
    <div class="container">
        <div class="row justify-content-center">
            @if (categories is not null)
            {
                @foreach (var category in categories)
                {
                    <div class="card fill text-white col-sm-4 col-md-2 m-1" @onclick="() => SelectProductsByCategory(category.Id)">
                        <img class="card-img" src="/img/Cardapio/@(category.Name).jpg" alt="">
                        <div class="card-img-overlay">
                            <h5 class="card-title text-center"><a>@category.Name</a></h5>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

<section class="container justify-content-center my-auto">
    <div class="row px-lg-5">
        <table class="table col-lg-8 col-sm-12 p-lg-5 p-sm-0 my-lg-5 my-sm-0">
            <tbody>
                @if (products is not null)
                {
                    @foreach (var item in displayItems)
                    {
                        <tr class="justify-content-between">
                            <td class="text-center">@item.Product.Name</td>
                            <td class="text-center">@item.Product.Price.ToString("C", CultureInfo.CurrentCulture)</td>
                            <td class="text-center">
                                <NumberInput @bind-CurrentValue=item.Quantity />
                            </td>
                            <td class="text-center">
                                <button class="btn btn-outline-dark" @onclick="() => AddToShoppingCart(item)">Adicionar</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</section>

@code {
    private Order order;
    private IEnumerable<Product> products;
    private List<OrderItem> displayItems = new();
    private List<Category> categories;

    public void AddToShoppingCart(OrderItem item)
    {
        order ??= new Order { Items = new List<OrderItem>() };
        order.Items.Add(item);

        _localStorage.SetItemAsync(SessionVariables.ShoppingCartOrder, order);
    }

    private async Task SelectProductsByCategory(int categoryId)
    {
        await GetProductsByCategory(categoryId);
        displayItems = new();
        MapProductToDisplayItems();
    }

    private async Task GetProductsByCategory(int categoryId)
    {
        products = await _productData.GetProductByCategory(categoryId);
    }

    protected override async Task OnInitializedAsync()
    {
        products = await _productData.GetAllProducts();
        categories = (await _categoryData.GetAllCategories()).ToList();

        foreach (var product in products)
        {
            displayItems.Add(new OrderItem { Product = product, ProductId = product.Id, Quantity = 1 });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        order = await _localStorage.GetItemAsync<Order>(SessionVariables.ShoppingCartOrder);
        StateHasChanged();
    }

    private void MapProductToDisplayItems()
    {
        foreach (var product in products)
        {
            displayItems.Add(new OrderItem { Product = product, ProductId = product.Id, Quantity = 1 });
        }
    }
}
