@using Restaurante.Data.Interfaces
@using System.Security.Claims
@using Restaurante.UI.Services
@inject IAddressService AddressService
@inject IAuthenticationService AuthenticationService

<h4>Endereços</h4>
@if (Addresses?.Count > 0)
{
    <ul class="list-group">
        @foreach (var address in Addresses)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <input type="checkbox" checked=@address.MainAddress @onchange="(eventArgs) => UpdateMainAddress(address, eventArgs.Value)"/><label class="px-2">@address.Street, @address.Number, @address.City, @address.State</label>
                </div>
            </li>
        }
    </ul>
}

<div class="d-flex justify-content-end">
    <button type="button" class="my-2 btn btn-dark btn-block" @onclick="AddNewAddress">Adicionar endereço</button>
</div>


@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    [Parameter]
    public List<Address> Addresses { get; set; }
    [Parameter]
    public EventCallback OnChange { get; set; }
    [Parameter]
    public EventCallback<List<Address>> AddressesChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var userId = await AuthenticationService.GetUserIdAsync();

        Addresses = (await AddressService.GetAddressesByUserId(userId)).ToList();

        if (Addresses?.Count > 0)
        {
            await AddressesChanged.InvokeAsync(Addresses);
            return;
        }

        await AddNewAddress();
    }

    private async Task AddNewAddress()
    {
        var modalReference = Modal.Show<AddressForm>("Adicione o endereço");

        if (modalReference.Result.IsCompletedSuccessfully == false) return;

        var formAddress = await GetResultingDataFromModal(modalReference);
        Addresses.Add(formAddress);

        await AddressesChanged.InvokeAsync(Addresses);
        await OnChange.InvokeAsync();

        ShowSuccessModal();
    }

    private async void UpdateMainAddress(Address address, object mainAddress)
    {
        if ((bool)mainAddress)
        {
            address.MainAddress = true;
        }

        if (address.MainAddress)
        {
            AddressService.SetMainAddress(address, Addresses);
        }

        await AddressesChanged.InvokeAsync(Addresses);
        await OnChange.InvokeAsync();
    }

    private async Task<Address> GetResultingDataFromModal(IModalReference modalReference)
    {
        var result = await modalReference.Result;
        return result.Data as Address; 
    }

    private void ShowSuccessModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(SuccessModal.Title), "O endereço foi incluido com sucesso!");
        Modal.Show<SuccessModal>(null, modalParameters);
    }
}
